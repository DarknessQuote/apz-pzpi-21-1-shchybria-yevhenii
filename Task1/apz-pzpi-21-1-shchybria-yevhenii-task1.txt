1.1	Передумови

Розробка програмного забезпечення, як і будь-яка тривала і інтелектуально вимоглива діяльність, може негативно позначитися на мотивації розробників. Це особливо актуально в конкретних областях програмної інженерії, таких як визначення вимог, проведення тестування програмного забезпечення, пошук і виправлення помилок, в яких творчий аспект програмування майже не проявляється. Залученість розробників значно погіршується, що потенційно впливає на якість їхньої роботи. Проєкти, над якими працюють демотивовані розробники, відзначаються великою кількістю помилок в коді через його низьку якість або відсутність тестування, постійними затримками термінів, невиконанням визначених вимог, низькою співпрацею між розробниками, конфліктами та стресом.
Однією з найбільш поширених технік підвищення мотивації працівників є гейміфікація, яка полягає у використанні ігрових елементів та технік ігрового дизайну у неігрових контекстах для залучення кінцевих користувачів до розв’язання проблем. Методи гейміфікації прагнуть залучити природні людські інстинкти, такі як досягнення, самовираження, конкуренція та інші для того, щоб підвищити внутрішню мотивацію людини. Незважаючи на відносно недавню популяризацію гейміфікації, було проведено велику кількість досліджень, спрямованих на її впровадження у різних галузях людської діяльності, які зазначають позитивний вплив гейміфікації на осіб та результати їхньої роботи, зокрема на підвищення внутрішньої мотивації та покращення командної роботи.
Використання гейміфікації в розробці програмного забезпечення не є дуже  поширеним явищем, на відміну від таких галузей, як навчання або маркетинг, однак існує достатньо прикладів успішного використання методів гейміфікації для створення якісного програмного забезпечення або прийняття нових методологій та процесів гнучкої розробки програмного забезпечення.

1.2	Бізнес-можливості

Впровадження методів гейміфікації в процеси роботи в різних галузях набирає велику популярність в останній час, і велика кількість платформ та програмних продуктів, які поширені в галузі розробки ПЗ та управління розробкою ПЗ, також застосовують деякі засоби гейміфікації або підтримують їх застосування:
1.	GitHub – популярний вебсервіс для хостингу репозиторіїв Git, підтримує деякі методи, які застосовуються при гейміфікації. Зокрема можна виділити можливість спільної роботи над репозиторіями з іншими користувачами і надання  зручної функціональності для спільної роботи і статистики щодо внесків різних користувачів у проєкт, що сприяє ефективній співпраці між робітниками, та різні індикатори прогресу, такі як візуалізація активності користувача на його профілі і значки, які надаються користувачеві за різні досягнення, що дозволяє користувачу візуалізувати свій прогрес та мотивує його до подальшої роботи. Хоча GitHub і має деякі елементи гейміфікації, він переважно спрямований на спільну роботу над кодом та управління версіями, тоді як наш концепт в основному зосереджений на гейміфікації розробки ПЗ та управління розробкою, включаючи задачі, планування, співпрацю та інше. Самі елементи, які пропонуються сервісом, доволі обмежені та спрямовані переважно до соціальної взаємодії, ніж до стимулювання розробників.
2.	Системи управління проєктами – популярні серед менеджерів інструменти управління проєктами, такі як Jira та Asana, хоча і майже не мають вбудованих засобів гейміфікації, проте вони дозволяють інтеграцію з різними плагінами та сервісами, спрямованими на підвищення залученості працівників під час роботи над проєктами. Дані сервіси можуть розширити функціональність систем управління проєктами, щоб включити в них різні засоби гейміфікації, такі як очки, таблиці лідерів, значки і досягнення та інші, які дозволяють користувачам відстежувати свій прогрес та змагатися з іншими користувачами, підвищуючи їх залучення. Також дані системи надають менеджерам налаштовувати робочі процеси та пристосовувати їх під свої потреби, що дозволяє вручну створювати ігровий досвід для робітників, наприклад за допомогою додання наративних елементів. Незважаючи на переваги застосування даних систем для гейміфікації процесів роботи, засоби гейміфікації цих систем є доволі загальними та поверхневими і можуть не підходити до потреб проєктів, які спрямовані саме на розробку програмного забезпечення. На противагу цьому, наш концепт зосереджений на потребах розробників ПЗ і буде мати функціонал гейміфікації, спрямований на задоволення даних потреб.
Беручи до уваги переваги та недоліки наведених вище систем, можемо виділити наступні відмінності нашого проєкту:
-	глибоке впровадження засобів гейміфікації в систему;
-	функціональність методів гейміфікації, зорієнтована на потреби розробників ПЗ та їх менеджерів;
-	гнучке налаштування функціоналу системи для пристосування під особливості команди чи проєкту;
-	можливість інтеграції з різними сервісами для розробників ПЗ, такими як системи контролю версій і т.д.
-	орієнтація на глобальний ринок шляхом локалізації та інтернаціоналізації системи для різних країн та мов.
Цільовими ринками даної системи є компанії або окремі команди, які спеціалізуються на розробці програмного забезпечення. Наш сервіс орієнтований переважно на команди малого або середнього розміру, але у процесі розробки системи та покращення функціоналу ми також будемо мати можливість орієнтуватися на великі компанії. Модель монетизації нашого продукту передбачає щомісячну або щорічну підписку користувачів на наш сервіс. Ціна підписки може змінюватися в залежності від розміру команди.

2.1	Окреслення концепції

Даний проєкт призначений допомогти командам розробників досягти якомога вищої якості процесів розробки та підвищити рівень їхньої залученості до своєї роботи за допомогою інтеграції методів гейміфікації в повсякденні процеси розробки, які призначені підвищити залученість та мотивацію користувачів, використовуючи природні прагнення людини до досягнень, співпраці, конкуренції і т.д.
Продукт пропонує командам розробників систему для гейміфікації процесів розробки ПЗ, яка матиме основний функціонал популярних систем управління проєктами, що дозволить легко інтегрувати систему в команди, які вже мають досвід роботи з подібними системами. На відміну від інших систем управління проєктами, наш продукт матиме функціонал, зосереджений на галузі розробки ПЗ, такий як завдання, пов’язані з повсякденними процесами розробки, такими як рефакторинг, виправлення помилок, тестування та інші, та інтеграція з популярними інструментами розробки, такими як онлайн-хостинг репозиторіїв GitHub та інші.
Доступ до системи буде здійснюватися за допомогою вебсайту або мобільного застосунку, які надаватимуть користувачам простий та інтуїтивний інтерфейс для взаємодії з системою. Веб-клієнт також матиме окремі панелі адміністратора для керівників команд та адміністраторів системи, які дозволять налаштовувати різні компоненти системи. Мобільний застосунок матиме систему оповіщень щодо нових завдань або інших подій, які відбулися в системі.
Продукт також включатиме в себе систему IoT пристроїв, яка включає в себе набір різних сенсорів, які будуть відслідковувати фізичний стан розробників та середовища, в якому вони працюють. Сенсори будуть відправляти отримані дані на сервер, після чого вони можуть застосовуватися керівником проєкту для аналізу стану працівників; самим розробникам можуть надаватися поради щодо покращення свого стану на основі отриманих даних.
Оскільки даний продукт матиме справу з розробкою програмних продуктів, які можуть містити вразливі дані або конфіденційну інформацію, особливу увагу варто приділити забезпеченню високої безпеки користувачів та їх даних. Для цього будуть застосовуватися наступні методи забезпечення безпеки:
-	використання надійних протоколів шифрування для передачі даних між сервером та іншими компонентами системи (веб-клієнт, мобільний застосунок та IoT пристрої);
-	надійні механізми автентифікації та авторизації для усунення доступу до конфіденційних даних стороннім та неавторизованим користувачам;
-	використання надійних систем збереження даних та дотримання вимог та практик забезпечення надійності збереження даних.
Впровадження даної системи сприятиме підвищенню якості розроблюваних програмних продуктів у компаніях-клієнтах та покращенню ставлення та залучення розробників до своєї роботи та команди. Поступове розповсюдження нашої платформи сприятиме покращенню процесів розробки по всьому світу та великій кількості якісних та надійних програмних продуктів, які виникнуть завдяки застосуванню даної системи при розробці.


2.2	Головна функціональність

MF-1: Створення завдань: Керівники проєктів можуть створювати завдання для розробників та включати різні деталі, такі як опис завдання, категорію, строк здачі та інше. Керівники також матимуть змогу призначати нагороди за виконання завдання, наприклад очки або значки.
MF-2: Створення нагород: Керівники проєктів можуть створювати різні нагороди за виконання завдань, такі як значки або досягнення. За бажанням керівники можуть використовувати стандартні нагороди і підлаштовувати їх під свої потреби, або імпортувати нагороди з інших проєктів.
MF-3: Інтеграція GitHub репозиторіїв: Керівники та розробники матимуть змогу додати репозиторій з програмним кодом проєкту до системи для того, щоб мати безпосередній доступ до даних репозиторію під час користування системою.
MF-4: Таблиця лідерів: Продукт матиме можливість показувати таблицю лідерів на основі набраних розробниками очок. За бажанням вона може бути відключена, якщо є потреба послабити конкуренцію в команді.
MF-5: Спостереження за фізичним станом працівників та їх оточенням: Продукт матиме систему IoT пристроїв, які призначені для спостереження за станом працівників та їх робочого середовища. Ці дані можуть бути використані для аналізу ситуації на даному етапі розробки або для надання порад розробникам щодо покращення їх стану.
MF-6: Профілі користувачів: Кожен користувач матиме змогу редагувати свій профіль та використовувати різні аватари та нагороди для підвищення самовираження розробників.
MF-7: Налаштування системи: Керівники матимуть змогу налаштовувати функціональність системи під потреби розробників або проєкту. Налаштування можуть включати в себе додання нових категорій завдань, зміну зовнішнього вигляду, додання або видалення певних засобів гейміфікації і т.д.

3.1	Рамки первинного випуску

Серверна частина повинна включати:
-	автентифікацію та авторизацію користувачів: реалізація системи користувачів з підтримкою ролей та прав доступу;
-	створення та редагування проєктів розробки: можливість створення та редагування інформації про проєкт та залучених в нього користувачів;
-	створення та редагування завдань: можливість створення та редагування інформації про завдання, пов’язані з певним проєктом;
-	створення та редагування нагород: можливість створення та редагування різних нагород за завдання;
-	створення та редагування профілів: можливість створення та редагування профілів користувачів з підтримкою налаштування їх зовнішнього вигляду;
-	налаштування функціональності проєкту: можливість налаштовувати окремі компоненти функціональності системи в окремому проєкті;
-	інтеграція зі сторонніми сервісами: можливість інтеграції з різними популярними інструментами розробки;
-	адміністрування системи: управління користувачами системи, управління даними системи, створення резервних копій налаштувань та даних, експорт та імпорт даних та налаштувань, управління сертифікатами;
-	шифрування даних: збереження конфіденційних даних у зашифрованому вигляді з використанням сучасних алгоритмів шифрування;
-	механізми резервного копіювання та відновлення даних: наявність автоматизованих механізмів резервного копіювання, які регулярно зберігатимуть копії даних.

Клієнтська частина повинна включати:
-	автентифікацію та авторизацію користувачів: реалізація системи користувачів з підтримкою ролей та прав доступу;
-	створення та редагування проєктів розробки: можливість створення та редагування інформації про проєкт та залучених в нього користувачів;
-	створення та редагування завдань: можливість створення та редагування інформації про завдання, пов’язані з певним проєктом;
-	створення та редагування нагород: можливість створення та редагування різних нагород за завдання;
-	створення та редагування профілів: можливість створення та редагування профілів користувачів з підтримкою налаштування їх зовнішнього вигляду;
-	налаштування функціональності проєкту: можливість налаштовувати окремі компоненти функціональності системи в окремому проєкті;
-	локалізацію та інтернаціоналізацію даних: підтримка різних кодових таблиць символів, обчислення та формати дати та часу, сортування текстових значень.

Мобільний застосунок повинен включати в себе:
-	автентифікацію та авторизацію користувачів: реалізація системи користувачів з підтримкою ролей та прав доступу;
-	створення та редагування проєктів розробки: можливість створення та редагування інформації про проєкт та залучених в нього користувачів;
-	створення та редагування завдань: можливість створення та редагування інформації про завдання, пов’язані з певним проєктом;
-	створення та редагування нагород: можливість створення та редагування різних нагород за завдання;
-	створення та редагування профілів: можливість створення та редагування профілів користувачів з підтримкою налаштування їх зовнішнього вигляду;
-	налаштування функціональності проєкту: можливість налаштовувати окремі компоненти функціональності системи в окремому проєкті;
-	локалізацію та інтернаціоналізацію даних: підтримка різних кодових таблиць символів, обчислення та формати дати та часу, сортування текстових значень.
-	систему оповіщень: можливість отримувати оповіщення з серверної частини про зміни у проєкті.

IoT частина повинна включати в себе:
-	збір та надсилання даних на сервер: дані з сенсорів збираються та надсилаються на серверну частину;
-	шифрування даних: перед надсиланням дані шифруються за допомогою надійних алгоритмів шифрування.

3.2	Рамки наступних випусків

Серверна частина може включати в себе:
-	детальну аналітику та статистику користувачів: можливість збирати більш детальні дані для кращого аналізу продуктивності команди;
-	інтеграцію з більшою кількістю сервісів розробки.

Клієнтська та мобільна частини можуть включати в себе:
-	надання технічної підтримки: можливість отримати підтримку щодо роботи системи від окремої команди надання підтримки;
-	інтерактивний туторіал: нові користувачі зможуть навчитися користуватися системою за допомогою інтерактивного керівництва.

4.3	Робоче середовище

В якості мови програмування для розробки серверної частини проєкту було обрано Go. Дана мова програмування відома своєю швидкістю та ефективністю, тому використання добре підійде для розробки системи, яка буде зустрічатися з великою кількістю запитів від багатьох розробників. Також екосистема даної мови має багато бібліотек та фреймворків для створення серверних застосунків, які є ефективними та простими в користуванні.
В якості системи управління базами даних було обрано PostgreSQL. Дана СУБД відома своєю потужністю та можливістю розширення при збільшенні обсягу системи. Також PostgreSQL має вбудовані засоби захисту даних, які допоможуть нам зберігати конфіденційні дані в безпеці.
В якості технологій для розробки клієнтської частини буде використовуватися бібліотека React та фреймворк Next.js. Дане сполучення є досить розповсюдженим у сфері розробки вебзастосунків через можливість швидкої розробки інтерфейсів за допомогою компонентів. React має велику екосистему бібліотек та фреймворків, одним з яких є Next.js, який ще більше підвищує якість застосунку за допомогою вбудованих за замовчуванням функцій, потрібних розробнику вебзастосунків, таких як програмування на стороні сервера, вбудовані засоби маршрутизації та інші.
Для розробки мобільного застосунку буде використовуватися мова програмування C# з технологією MAUI. Дана технологія дозволяє створювати версії додатку для операційних систем Android та iOS одночасно на основі єдиної кодової бази, що зменшує час та кошти, витрачені на розробку мобільних застосунків.
Для розробки IoT частини системи буде використано Arduino, який надає різні датчики та сенсори, які будуть використовуватися в нашій системі. В якості мови програмування буде використано C++. При передачі даних з датчиків на сервер будуть використовуватися надійні методи шифрування.