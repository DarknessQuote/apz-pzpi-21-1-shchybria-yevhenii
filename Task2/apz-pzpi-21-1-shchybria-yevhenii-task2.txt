1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Архітектура розроблюваної програмної системи побудована за принципом дворівневої  клієнт-серверної архітектури, яка ділиться на наступні логічні рівні:
1.	Рівень управління даними – відповідає за збереження бази даних та доступу до неї;
2.	Прикладний рівень – відповідає за реалізацію основної логіки застосунку та необхідну обробку інформації;
3.	Рівень представлення даних – являє собою інтерфейс користувача і відповідає за представлення даних користувачеві і введення від нього керуючих команд.
Програмна система передбачатиме взаємодію клієнтського та серверного програмних модулів за моделлю тонкого клієнта: сервер відповідатиме за логіку застосунку та збереження даних, а клієнтська частина забезпечуватиме лише функції рівня представлення.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

На основі описаної архітектури системи було побудовано діаграму розгортання (див. рис. 2.1). Система складається з 5 компонентів: серверна частина, сервер з базою даних, клієнтська частина, мобільний застосунок та IoT-застосунок.
Серверна частина складається з веб-серверу та бази даних, які розгортатимуться на одній машині для покращення передачі даних між ними. Веб-клієнт, мобільний застосунок та IoT пристрій є клієнтськими частинами, які взаємодіють з серверною частиною за допомогою протоколу HTTP.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Архітектура серверної частини програмної системи побудована за принципами Clean Architecture, яка забезпечує гнучкість та легкість розширення кодової бази шляхом розділення коду на наступні шари:
1.	Domain – містить у собі класи сутностей, над якими виконуються операції в застосунку, та оголошення інтерфейсів для взаємодії з базою даних.
2.	Application – містить у собі основну бізнес-логіку застосунку.
3.	Infrastructure – відповідає за імплементацію інтерфейсів Domain та Application рівнів та взаємодію зі сторонніми базами даних або сервісами.
4.	Presentation – відповідає за взаємодію з клієнтами.
Рівні Domain та Application не залежать від інших рівнів, що дозволяє абстрагувати бізнес-логіку від технічних деталей застосунку і замінити їх за необхідності.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Користувачі розроблюваної програмної системи діляться на три ролі: адміністратори системи, менеджери проєктів та розробники.
Основними потребами адміністраторів є керування даними системи, що включає в себе експорт даних, перегляд користувачів системи та управління компаніями.
Основною потребою менеджерів є керування проєктами компанії, що включає в себе їх створення, управління розробниками та задачами проєктів, перегляд статистики проєкту та створення окремих нагород для розробників.
Потребами розробників є взаємодія із задачами проєкту, тобто їх перегляд, отримання та виконання, а також перегляд статистики проєкту.
На основі наведених потреб було створено діаграму прецедентів (див. додат. А. 1).

5 ПОБУДОВА ER-ДІАГРАМИ

Для проєктування бази даних було розроблено ER-модель даних (див. рис. 5.1), яка складається з 11 таблиць: користувач, компанія, проєкт, задача, категорія задачі, прогрес задачі, нагороди, очки розробника, нагороди розробника, тип вимірювання, вимірювання користувача. Дані таблиці мають наступні зв’язки:
•	компанія-проєкт – один-до-багатьох;
•	проєкт-задача – один-до-багатьох;
•	категорія задачі-задача – один-до-багатьох;
•	задача-прогрес задачі – один-до-одного;
•	користувач-прогрес задачі – один-до-багатьох;
•	користувач-очки розробника – один-до-одного;
•	користувач-нагорода – багато-до-багатьох;
•	тип вимірювання-вимірювання користувача – один-до-багатьох;
•	користувач-вимірювання користувача – один-до-багатьох.

6 СПЕЦИФІКАЦІЯ REST

Серверна частина налічує 30 кінцевих точок, які відповідають за виконання бізнес-логіки та надання даних користувачам. Специфікацію даних кінцевих точок наведено в табл. 6.1.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

При розробці серверної частини було виділено декілька модулів, з яких складається серверна частина,  тому числі й основний модуль рішення (див. рис. 7.1). Основний модуль серверної частини включає в себе модулі domain, application, infrastructure та presentation, які відповідають за різні рівні Clean Architecture. Інші пакети є сторонніми і використовуються для наступних цілей:
•	chi – маршрутизатор для створення HTTP-сервісів;
•	pgx – драйвер для роботи з базами даних PostgreSQL;
•	viper – налаштування конфігурації для проєктів;
•	jwt-go – робота з JSON веб-токенами.

ВИСНОВКИ

В ході виконання лабораторної роботи було проведено концептуальне моделювання розроблюваної програмної системи та розроблено серверну частину програмної системи; було наведено опис прийнятих інженерних рішень з представленою загальною архітектурою системи.